---
# List of plays
-
  # Hosts: where our play will run and options it will run with
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: always

  # Vars: variables that will apply to the play, on all targets 

  # Tasks: the list of tasks that will be executed within 
  #        the play, this section can also be used for 
  #        pre and post tasks
  tasks:
    # from https://superuser.com/questions/1395954/ansible-playbook-to-determine-os-release
  - name: System details
    debug: msg="{{ item }}"
    with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"
  - name: Verify install_files is present
    debug: msg="install_files/_README = {{ lookup('file', '/home/kasm-default-profile/install_files/_README') }}"  
    # Detect if we are running on a WSL2 environment
  - name: Set wsl2_environment fact default to false
    set_fact:
      wsl2_environment: false
  - name: Set wsl2_environment fact True
    set_fact:
      wsl2_environment: true
    when: ansible_kernel is search("microsoft-standard-WSL2")  
  # fix for .gnupg/ permissions when building custom images
  - name: Add fix for .gnupg/ permissions
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "chmod 700 ~/.gnupg/"    
  - name: Add custom prompt to /etc/skel/.profile
    lineinfile:
      path: "/etc/skel/.profile"
      line: 'export PS1="\[\033[00;32m\][\w]\$\[\033[00m\] "'

  # Handlers: the list of handlers that are executed as a notify 
  #           key from a task

  # Roles: list of roles to be imported into the play
  roles:
  - role: irixjp.role_example_hello

# Add additional plays here (remember the list entry -)
# Be sure to use the same hosts and connection entries above
# addtional plays

- 
  # Install sudo for the vs-code role and PostgreSQL
  hosts: localhost
  connection: local
  tasks:
  - name: Install Sudo
    apt:
      name: sudo
      update_cache: yes
  - name: Preserve DONT_PROMPT_WSL_INSTALL in sudoers
    lineinfile:
      path: "/etc/sudoers"
      line: "Defaults        env_keep += \"DONT_PROMPT_WSL_INSTALL\""
    when: wsl2_environment

-
  # Install QGIS
  hosts: localhost
  connection: local
  gather_facts: yes
  become: yes
  tasks:
  - name: Install gnupg with Apt
    apt:
      name: gnupg
      update_cache: yes
  - name: Install software-properties-common with Apt
    apt:
      name: software-properties-common
      update_cache: yes
  - name: Install QGIS Signing Key
    shell: wget -qO - https://qgis.org/downloads/qgis-2021.gpg.key | gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/qgis-archive.gpg --import
  - name: Grant read permissions for QGIS Signing Key
    shell: chmod a+r /etc/apt/trusted.gpg.d/qgis-archive.gpg
  - name: Add latest stable QGIS repo
    shell: add-apt-repository "deb https://qgis.org/ubuntu $(lsb_release -c -s) main"
  - name: Install qgis with Apt
    apt:
      name: qgis
      update_cache: yes
  - name: Install qgis-plugin-grass with Apt
    apt:
      name: qgis-plugin-grass
      update_cache: yes

-
  # Install / Configure PostgreSQL + PostGIS
  hosts: localhost
  connection: local
  gather_facts: yes
  become: yes
  tasks:
  - name: Install postgresql 
    apt:
        name: postgresql
        update_cache: yes
  - name: Install postgis 
    apt:
        name: postgis
        update_cache: yes
  - name: Add public key for pgadmin4
    shell: curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
  - name: Add pgadmin4 Apt repo
    shell: sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
  - name: Install pgadmin4-desktop
    apt:
        name: pgadmin4-desktop
        update_cache: yes
  - name: Start PostgreSQL service
    service:
        enabled: yes
        name: postgresql
        state: started
  - name: Allow postgres to sign in with peer authentication
    become_user: postgres
    community.postgresql.postgresql_pg_hba:
        dest: /etc/postgresql/12/main/pg_hba.conf
        address: local 
        users: postgres 
        method: peer
        create: yes
  - name: Create new Postgres user 
    become_user: postgres
    community.postgresql.postgresql_user:
        name: geocml 
        password: geocml 
        role_attr_flags: "CREATEDB,NOSUPERUSER"
  - name: Create new Postgres database
    become_user: postgres
    community.postgresql.postgresql_db:
        name: geocml_db
        conn_limit: 100 # TODO: Do we need to limit this? Might be good to give people the option
  - name: Give geocml full privs to geocml_db 
    become_user: postgres
    community.postgresql.postgresql_privs:
        type: database
        database: geocml_db
        roles: geocml
        grant_option: no
        privs: all
  - name: Set geocml as owner of geocml_db
    become_user: postgres
    community.postgresql.postgresql_owner:
        db: geocml_db
        new_owner: geocml
  - name: Allow geocml access to geocml_db from ipv4 localhost 127.0.0.1
    become_user: postgres
    community.postgresql.postgresql_pg_hba:
        dest: /etc/postgresql/12/main/pg_hba.conf
        contype: host
        users: geocml 
        source: 127.0.0.1
        databases: geocml_cb 
        method: md5 
        create: yes
  - name: Add PostGIS extension to geocml_db
    become_user: postgres
    community.postgresql.postgresql_ext:
        db: geocml_db
        name: postgis
  - name: Restart PostgreSQL service
    service:
        enabled: yes
        name: postgresql
        state: restarted # TODO: add a test here to make sure that there are no exceptions from Postgres after configuration

- 
  # Create default user 
  hosts: localhost
  connection: local
  tasks:
  - name: Create default user
    ansible.builtin.user:
        name: default
        password: $6$y5bV.F7ASOab$Mj7q.8PSdc5edv72obVZ0vuEzUuvTvV06uJTZ0SidIxJQ9uSKNRSQWt/UwHy9vmoAM1EdtRwvCegKEsPkWuVd1 # pw: default
        home: /home/kasm-user
        group: postgres

-
  # install chrome
  hosts: localhost
  connection: local
  gather_facts: yes

  roles:
    - role: webarchitect609.google_chrome

-
  # install keychain and git
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_git_keychain
  become: yes
  vars:
    git_version: "2.36.1"
    git_version_to_install: "1:{{ git_version }}-0ppa1~ubuntu20.04.1"
    keychain_version: "2.8.5"
    keychain_version_to_install: "{{ keychain_version }}-1"
    keychain_version_expected: "{{ keychain_version }}.."

  tasks:
  - name: Install dh-autoreconf
    apt:
      name: dh-autoreconf
      update_cache: yes
  - name: Install libcurl4-gnutls-dev
    apt:
      name: libcurl4-gnutls-dev
      update_cache: yes
  - name: Install libexpat1-dev
    apt:
      name: libexpat1-dev
      update_cache: yes
  - name: Install gettext
    apt:
      name: gettext
      update_cache: yes
  - name: Install libz-dev
    apt:
      name: libz-dev
      update_cache: yes
  - name: Install libssl-dev
    apt:
      name: libssl-dev
      update_cache: yes
  - name: Install install-info
    apt:
      name: install-info
      update_cache: yes
  - name: Download git (v2.36.1) tarball
    shell: wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.36.1.tar.gz -O /home/kasm-default-profile/git-2.36.1.tar.gz
  - name: Extract git source files
    unarchive:
      src: /home/kasm-default-profile/git-2.36.1.tar.gz
      dest: /home/kasm-default-profile/
      remote_src: yes
      creates: /home/kasm-default-profile/git-2.36.1/README.md
  - name: Delete git tarball
    shell: rm /home/kasm-default-profile/git-2.36.1.tar.gz
  - name: Build git
    shell:
      cmd: make configure && ./configure --prefix=/usr && make > /tmp/git_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/git-2.36.1
      executable: /bin/bash
  - name: Delete git source files
    shell: rm -rf /home/kasm-default-profile/git-2.36.1
  - name: Install Keychain
    apt:
      name: "keychain={{ keychain_version_to_install }}"
      update_cache: yes
  - name: Get git version
    shell: git version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_git_version
  - name: Get keychain version
    shell: 
      cmd: keychain -V 2> >(grep -i keychain) 2> >(sed 's/[[:alpha:]|(|[:space:]]//g') | fgrep '*' | sed 's/[*~://]//g'
      executable: /bin/bash
    register: installed_keychain_version
  - name: Display git and keychain versions
    debug:
      msg: "git = {{ installed_git_version.stdout }} | keychain = {{ installed_keychain_version.stdout }}"
  - name: Test git version
    fail:
      msg: "Git Version Error: Expected {{ git_version }} | Found {{ installed_git_version.stdout }}"
    when: installed_git_version.stdout != git_version  
  - name: Test keychain version
    fail:
      msg: "Keychain Version Error: Expected {{ keychain_version_expected }} | Found {{ installed_keychain_version.stdout }}"
    when: installed_keychain_version.stdout != keychain_version_expected    

-
  # install Python packages with pip
  hosts: localhost
  connection: local
  gather_facts: yes
  become: yes

  tasks:
  - name: Update OS to point python to python3
    apt:
      name: python-is-python3
      update_cache: yes
  - name: Install python packages with pip
    pip:
      name:
        - notebook
        - voila
        - pint
        - markupsafe==2.0.1

  roles:
    - role: geerlingguy.pip

-
# add dev user to give vs code somewhere to install extensions
  hosts: localhost
  connection: local
  tasks:
  - name: Add dev user
    user:
      name: dev
      uid: 1001

-
  # install the remainder of the tools
  hosts: localhost
  connection: local
  environment: 
    DONT_PROMPT_WSL_INSTALL: 1
  roles:
    - role: gantsign.visual-studio-code
      users:
        - username: "dev"
          visual_studio_code_extensions:
            - ms-python.python
          visual_studio_code_settings_overwrite: yes
          visual_studio_code_settings: {
            "extensions.ignoreRecommendations": true,
            "update.mode": "none",
            "extensions.autoUpdate": false,
            "extensions.autoCheckUpdates": false,
            "terminal.integrated.profiles.linux": {
              "bash (login)": {
                "path": "bash",
                "args": ["-l"]
                }
              },
            "terminal.integrated.defaultProfile.linux": "bash (login)" 
          }  

-
  # Copy VS Code changes to kasm-default-profile and lean up (remove) dev user now that vs code is installed
  hosts: localhost
  connection: local
  tasks:
  - name: Copy VS Code changes to kasm-default-profile
    shell: 
      cmd: cp -r /home/dev/.config/Code/ /home/kasm-default-profile/.config/Code/ && cp -r /home/dev/.vscode/ /home/kasm-default-profile/.vscode/
  - name: Remove dev user
    user:
      name: dev
      state: absent
      remove: yes 

# Three dots indicate the end of a YAML document
...
